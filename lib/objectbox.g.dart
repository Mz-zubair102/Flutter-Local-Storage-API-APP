// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/post_model.dart';
import 'models/user_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 318965479818473299),
      name: 'PostModel',
      lastPropertyId: const IdUid(4, 4898896851272501075),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4726041024650058377),
            name: 'userId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 3756694617020262956),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 4091557090539984154),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4898896851272501075),
            name: 'body',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 1069996819738652123),
      name: 'UserModel',
      lastPropertyId: const IdUid(6, 7268048299062261488),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 804506760068921408),
            name: 'id',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 8879331914000740955),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3484768168163345509),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8349061429114700697),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6567687291165381556),
            name: 'phone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7268048299062261488),
            name: 'website',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 1069996819738652123),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [5029139993511082694],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        275424535241219732,
        180591795506783093,
        4616031388447068839,
        4969249522358141061,
        7588441662605750596,
        977157456135768968
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    PostModel: EntityDefinition<PostModel>(
        model: _entities[0],
        toOneRelations: (PostModel object) => [],
        toManyRelations: (PostModel object) => {},
        getId: (PostModel object) => object.id,
        setId: (PostModel object, int id) {
          object.id = id;
        },
        objectToFB: (PostModel object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final bodyOffset = fbb.writeString(object.body);
          fbb.startTable(5);
          fbb.addInt64(0, object.userId);
          fbb.addInt64(1, object.id ?? 0);
          fbb.addOffset(2, titleOffset);
          fbb.addOffset(3, bodyOffset);
          fbb.finish(fbb.endTable());
          return object.id ?? 0;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PostModel(
              userId:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              id: const fb.Int64Reader()
                  .vTableGetNullable(buffer, rootOffset, 6),
              title: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              body: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));

          return object;
        }),
    UserModel: EntityDefinition<UserModel>(
        model: _entities[1],
        toOneRelations: (UserModel object) => [],
        toManyRelations: (UserModel object) => {},
        getId: (UserModel object) => object.id,
        setId: (UserModel object, int id) {
          object.id = id;
        },
        objectToFB: (UserModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final usernameOffset = fbb.writeString(object.username);
          final emailOffset = fbb.writeString(object.email);
          final phoneOffset = fbb.writeString(object.phone);
          final websiteOffset = fbb.writeString(object.website);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, usernameOffset);
          fbb.addOffset(3, emailOffset);
          fbb.addOffset(4, phoneOffset);
          fbb.addOffset(5, websiteOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              username: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              phone: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              website: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [PostModel] entity fields to define ObjectBox queries.
class PostModel_ {
  /// see [PostModel.userId]
  static final userId =
      QueryIntegerProperty<PostModel>(_entities[0].properties[0]);

  /// see [PostModel.id]
  static final id = QueryIntegerProperty<PostModel>(_entities[0].properties[1]);

  /// see [PostModel.title]
  static final title =
      QueryStringProperty<PostModel>(_entities[0].properties[2]);

  /// see [PostModel.body]
  static final body =
      QueryStringProperty<PostModel>(_entities[0].properties[3]);
}

/// [UserModel] entity fields to define ObjectBox queries.
class UserModel_ {
  /// see [UserModel.id]
  static final id = QueryIntegerProperty<UserModel>(_entities[1].properties[0]);

  /// see [UserModel.name]
  static final name =
      QueryStringProperty<UserModel>(_entities[1].properties[1]);

  /// see [UserModel.username]
  static final username =
      QueryStringProperty<UserModel>(_entities[1].properties[2]);

  /// see [UserModel.email]
  static final email =
      QueryStringProperty<UserModel>(_entities[1].properties[3]);

  /// see [UserModel.phone]
  static final phone =
      QueryStringProperty<UserModel>(_entities[1].properties[4]);

  /// see [UserModel.website]
  static final website =
      QueryStringProperty<UserModel>(_entities[1].properties[5]);
}
